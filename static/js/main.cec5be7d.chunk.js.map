{"version":3,"sources":["components/weather/weatherUtils.tsx","components/weather/weather.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyle","makeStyles","icon","fontSize","Weather","classes","useState","temprature","setTemprature","windSpeed","setWindSpeed","cloudPercentage","setCloudPercentage","windDirection","setWindDirection","currentTime","Date","setMinutes","setSeconds","useEffect","fetch","then","response","json","data","properties","timeseries","forEach","t","time","toString","instant","details","air_temperature","wind_speed","cloud_area_fraction","wind_from_direction","useWeather","Box","maxWidth","m","Paper","elevation","p","Grid","container","spacing","alignItems","item","xs","Whatshot","className","Typography","variant","ArrowDownward","style","transform","Cloud","align","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cec5be7d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyle = makeStyles({\r\n  icon: {\r\n    fontSize: 48,\r\n  },\r\n});\r\n\r\nexport const useWeather = () => {\r\n  const [temprature, setTemprature] = useState<number>();\r\n  const [windSpeed, setWindSpeed] = useState<number>();\r\n  const [cloudPercentage, setCloudPercentage] = useState<number>();\r\n  const [windDirection, setWindDirection] = useState<number>();\r\n\r\n  const currentTime = new Date();\r\n  currentTime.setMinutes(0);\r\n  currentTime.setSeconds(0);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      \"https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=59.05&lon=9.98\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        data.properties.timeseries.forEach((t: any) => {\r\n          if (new Date(t.time).toString() === currentTime.toString()) {\r\n            const {\r\n              air_temperature,\r\n              wind_speed,\r\n              cloud_area_fraction,\r\n              wind_from_direction\r\n            } = t.data.instant.details;\r\n\r\n            setTemprature(air_temperature);\r\n            setWindSpeed(wind_speed);\r\n            setCloudPercentage(cloud_area_fraction);\r\n            setWindDirection(wind_from_direction)\r\n          }\r\n        })\r\n      );\r\n  });\r\n\r\n  return { temprature, windSpeed, cloudPercentage, windDirection };\r\n};\r\n","import { Box, Paper, Typography, Grid } from \"@material-ui/core\";\r\nimport { ArrowDownward, Cloud, Whatshot } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { useWeather, useStyle } from \"./weatherUtils\";\r\n\r\nconst Weather: React.FC = () => {\r\n  const classes = useStyle();\r\n  const {\r\n    temprature,\r\n    windSpeed,\r\n    cloudPercentage,\r\n    windDirection,\r\n  } = useWeather();\r\n\r\n  return (\r\n    <Box maxWidth={370} m={5}>\r\n      <Paper elevation={3}>\r\n        <Box p={2}>\r\n          <Grid container spacing={3} alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              <Whatshot className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Typography variant=\"h2\">{temprature}</Typography>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Typography variant=\"h2\">Â°C</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={3}>\r\n              <ArrowDownward\r\n                style={{ transform: \"rotate(\" + windDirection + \"deg\" + \")\" }}\r\n                className={classes.icon}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Typography variant=\"h2\">{windSpeed}</Typography>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Typography variant=\"h2\">m/s</Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={3}>\r\n              <Cloud className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n              <Typography variant=\"h2\">{cloudPercentage}</Typography>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Typography variant=\"h2\">%</Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Typography align=\"center\">Larvik</Typography>\r\n        </Box>\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import Weather from \"./components/weather/weather\";\n\nfunction App() {\n  return (\n    <div>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}